/* -*-c-*-
   IP Personality -- Sample config file
*/

/* This defines an id for the following configuration (up to
   20 characters). This is used to know what configuration is
   actually used by a rule. The "emulated" OS name might be a
   good choice :)
*/
id "Example";

/* Generic TCP mangling options */
tcp {
  /* Do we want to mangle packets related to incoming connections ? */
  incoming yes;

  /* Do we want to mangle packets related to outgoing connections ? */
  outgoing yes;

  /* A maximal window size allowed.
     set to 0 or comment out to disable window size mangling. */
  max-window 0;
}

/* ISN Generation and Sequence Number Mangling options */
tcp_isn {
  /* Type of the emulated ISN Generator:
     The following are available:
     - type asis;
         Do not change the sequence numbers.
     - type fixed-inc <number>;
         Uses a fixed-increment generator incrementing ISN by the given
	 amount. A value of 0 emulates a constant ISN generator.
     - type random-inc <number>;
         Uses a random-increment generator incrementing ISN by a randomly
	 choosen number less than the given amount.
     - type true-random;
         Uses a true random ISN generator.
     - type builtin;
         Uses the OS builtin generator.
     - type time-inc <number>;
         Uses a time-dependant increment using the specified frequency.
         (This has the host HZ value granularity)
         For example, to mimic the recommended ISN from rfc793 (one
         increment every 4 micro-seconds), one would use time-inc 25000.
  */
  type true-random;
  
  /* Initial value for the emulated generator.
     Only relevant for fixed-inc and random-inc generators. Can be set
     to a specific value or to 'random' which will be choosen at rule
     loading time */
  initial-value random;
}

/* IPID Generation Options */
ip_id {
  /* Type of the generator. The same generator as for ISN are available
     plus broken-inc which is analog to fixed-inc but keeping ids in 
     little endian order in the packet (to mimic a miscrosoft bug...) */
  type broken-inc 1;
  initial-value random;
}

/* TCP Options rewriting options */
tcp_options {
  /* Do we want to keep unknown options (ones that can't be tested/manipulated
     below) ? */
  keep-unknown yes;

  /* Do we want to keep known options that we didn't test/use below ? */
  keep-unused yes;

  /* Do we want to rewrite packets that do not belong to an established
     connection ? By default, packets are only rewriten if they match the
     connection settings of the tcp section. */
  isolated-packets yes;

  /* Do we want to scale time-stamps on local packets, so they follow
     a specific frequency (bu default the host HZ value) ? */
  timestamp-scale 1000;

  /* Defines the Options rewriting code.
     This code operates on a an empty option buffer, populating it progressively
     with options from the original packet.
     
     Syntax is C like, with the following rules:
     - a copy(option) instruction causes that option's value (if defined in the
     original packet) to be inserted in the new options list.
     - if tests can use the following conditions:
       * option(opt) is true if  option is present in the original packet.
       * flags(flag) is true if the flag is set in the original packet.       
       * flags(flag1|flag2|..) is true if one of flag1, flag2.. is set in the
         original packet.
       * flags(flag1&flag2&..) is true if all of flag1, flag2.. are set in the
         original packet.
       * (!condition) is true if condition is false.

     Conditions can be grouped and ordonned using the usual ||, &&, ( and )
     operators. Note that to check multiple flags it is more efficient to
     group flags together as a single condition instead of multiple one flag
     conditions.

     The following option names are known: eol, nop, wss, wscale, sackOK, sack
       echo, echoreply, timestamp, pocOK, pocSP, CC, CC.NEW, C.ECHO,
       acreq and acdata.
     The following tcp flags are known: syn, ack, fin, urg, push, ece, cwr,
       bog1, bog2, bog3, bog4.
     Refer to RFC793, RFC1072, RFC1146, RFC1323, and RFC1693 for more info
     about those.
  */
  code { // sample code
    if (flags(syn)) {
      if (option(sackOK))
	copy(sackOK);
      else {
	copy(nop); copy(nop);
      }
      copy(timestamp);
      copy(mss);
    } else {
      if (option(sack))
	copy(sack);
      else {
	copy(nop); copy(nop);
      }
      copy(timestamp);
    }
  }
}

tcp_decoy {
  /* defines "decoy" behavior. The following code matches weird packets
     and can decide to let them go asis, to reply to them or to drop them.

     Syntax is like for options rewritting code, with the following new
     instructions:
     - insert(option, value): adds the option and define its value in the
     new option list. Supported options for this are mss, wscale, timestamp.
     value can be a number, or 'this' to indicate a value fitting the original 
     packet value, or 'this + number' to change offset.
     - set(argument, value): works the same as insert for non options
     arguments. Supported args are: df, win, ack and flags.
     For flags, value must be a valid combinaison of tcp flags as for
     option rewritting code.
     - drop: ends processing and drops packet.
     - accept: ends processing and go on normally with packet.
     - reply: build a reply with the current option list and the current
     attributes, and send it. The original packet is dropped.

     The following new conditions can be used:
     - listen: true if the destination port is open on belocalhost.
     - ack(val): true if the packet ack value is val.
  */
  code { /* This is taken from QNX fingerprints */
    if (option(mss)) { /* nmap has mss on all of its pkts */
      set(df, 0);
      if (listen) {
	if (flags(syn&ece)) { /* nmap test 1 */
	  set(win, 7950);
	  set(ack, this + 1);
	  set(flags, ack|syn);
	  insert(mss, this+1);
	  reply;
	}
	if (flags(null)) /* nmap test 2 */
	  drop; 
	if (flags(syn&fin&urg&push)) { /* nmap test 3 */
	  set(win, 7950);
	  set(ack, 2);
	  set(flags, ack);
	  reply;
	}
	if (ack(0) && flags(ack) && !flags(syn|push|urg|rst)) { /* nmap test 4 */
	  set(win, 8192);
	  set(ack, 2);
	  set(flags, rst);
	  reply;
	}
      } else {
	set(win, 0);
	if (flags(syn) && !flags(ack)) { /* nmap test 5 */
	  set(ack, this + 1);
	  set(flags, ack|rst);
	  reply;
	}
	if (ack(0) && flags(ack) && !flags(syn|push|urg|rst)) { /* nmap test 6 */
	  set(ack, 2);
	  set(flags, rst);
	  reply;
	}
	if (flags(fin&push&urg)) { /* nmap test 7 */
	  set(ack, this);
	  set(flags, ack|rst);
	  reply;
	}
      }
    }
  }
}

/* ICMP unreach for UDP to closed port mangling options
   (comment out whole section to disable mangling) */
udp_unreach {
  /* send an icmp unreach for a udp to closed port ? */
  reply yes;

  /* should the df bit be set on the generated icmp */
  df yes;

  /* maximum len of the icmp unreach generated (how many of the
     original packet to keep at most). */
  max-len 500;

  /* type of service of icmp packet */
  tos 0;

  /* if some fields of the original packet need to be changed
     specify them here.
     For every field (except length), the answer can be either:
      - same (not changed; this is the default).
      - zero (set to zero/fill with zeroes).
      - mangle (replace by a different value).
  */
  mangle-original {
    /* what should be the length in the old ip header ?
       ('same' or value) */
    ip-len 0;
    
    /* should the initial ip id be changed ? */
    ip-id same;
    
    /* should the initial ip cheksum be changed ? */
    ip-csum same;
    
    /* what should be the length in the old udp header ?
       ('same' or value) */
    udp-len 0;
    
    /* should the initial udp checksum be changed ? */
    udp-csum same;
    
    /* should the initial udp data be changed ? */
    udp-data mangle;
  }
}


/* IPTTL Generation Options */
ip_ttl {
  /* Type of the generator. The same generator as for ISN are available
     plus broken-inc which is analog to fixed-inc but keeping ids in 
     little endian order in the packet (to mimic a miscrosoft bug...) */
  initial-value random;
}

/* HTTP GET Generation Options */
http {
  cookiefrag yes;
}
