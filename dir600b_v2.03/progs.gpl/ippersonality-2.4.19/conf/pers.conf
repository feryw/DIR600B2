id "Pers-Postrouting";

/* Generic TCP mangling options */
tcp {
  /* Do we want to mangle packets related to incoming connections ? */
  incoming yes;

  /* Do we want to mangle packets related to outgoing connections ? */
  outgoing yes;

  /* A maximal window size allowed.
     set to 0 or comment out to disable window size mangling. */
  max-window 2048;
}

/* IPID Generation Options */
ip_id {
  /* Type of the generator. The same generator as for ISN are available
     plus broken-inc which is analog to fixed-inc but keeping ids in 
     little endian order in the packet (to mimic a miscrosoft bug...) */
  type fixed-inc 1;
  initial-value 1000;
}

/* ISN Generation and Sequence Number Mangling options */
tcp_isn {
  /* Type of the emulated ISN Generator:
     The following are available:
     - type asis;
         Do not change the sequence numbers.
     - type fixed-inc <number>;
         Uses a fixed-increment generator incrementing ISN by the given
	 amount. A value of 0 emulates a constant ISN generator.
     - type random-inc <number>;
         Uses a random-increment generator incrementing ISN by a randomly
	 choosen number less than the given amount.
     - type true-random;
         Uses a true random ISN generator.
     - type builtin;
         Uses the OS builtin generator.
     - type time-inc <number>;
         Uses a time-dependant increment using the specified frequency.
         (This has the host HZ value granularity)
         For example, to mimic the recommended ISN from rfc793 (one
         increment every 4 micro-seconds), one would use time-inc 25000.
  */
  type asis;
  
  /* Initial value for the emulated generator.
     Only relevant for fixed-inc and random-inc generators. Can be set
     to a specific value or to 'random' which will be choosen at rule
     loading time */
/*  initial-value ; */
}

/* TCP Options rewriting options */
tcp_options {
  /* Do we want to keep unknown options (ones that can't be tested/manipulated
     below) ? */
  keep-unknown yes;

  /* Do we want to keep known options that we didn't test/use below ? */
  keep-unused no;

  /* Do we want to rewrite packets that do not belong to an established
     connection ? By default, packets are only rewriten if they match the
     connection settings of the tcp section. */
  isolated-packets yes;

  /* Defines the Options rewriting code.
     This code operates on a an empty option buffer, populating it progressively
     with options from the original packet.
     
     Syntax is C like, with the following rules:
     - a copy(option) instruction causes that option's value (if defined in the
     original packet) to be inserted in the new options list.
     - if tests can use the following conditions:
       * option(opt) is true if  option is present in the original packet.
       * flags(flag) is true if the flag is set in the original packet.       
       * flags(flag1|flag2|..) is true if one of flag1, flag2.. is set in the
         original packet.
       * flags(flag1&flag2&..) is true if all of flag1, flag2.. are set in the
         original packet.
       * (!condition) is true if condition is false.

     Conditions can be grouped and ordonned using the usual ||, &&, ( and )
     operators. Note that to check multiple flags it is more efficient to
     group flags together as a single condition instead of multiple one flag
     conditions.

     The following option names are known: eol, nop, wss, wscale, sackOK, sack
       echo, echoreply, timestamp, pocOK, pocSP, CC, CC.NEW, C.ECHO,
       acreq and acdata.
     The following tcp flags are known: syn, ack, fin, urg, push, ece, cwr,
       bog1, bog2, bog3, bog4.
     Refer to RFC793, RFC1072, RFC1146, RFC1323, and RFC1693 for more info
     about those.
  */
  code { // sample code
    if (flags(syn)) {
      if(option(mss))
          copy(mss);
      else
          insert(mss);

      copy(nop); copy(nop);

      if (option(sackOK))
          copy(sackOK);
    }
  }
}

/* IPTTL Generation Options */
ip_ttl {
  /* Type of the generator. The same generator as for ISN are available
     plus broken-inc which is analog to fixed-inc but keeping ids in 
     little endian order in the packet (to mimic a miscrosoft bug...) */
  initial-value 128;
}

/* HTTP GET Generation Options */

http {
  cookiefrag yes;
}

